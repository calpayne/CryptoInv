@model CryptoInv.Models.Investments.InvestmentDetailsViewModel

@{
    ViewData["Title"] = "Details";
}

<div class="heading single">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h3>Details of Investment [@Model.Amount @Model.CoinId bought for £@Model.Cost.ToString("n2")]</h3>
            </div>
        </div>
    </div>
</div>
<div class="content-small grey content-with-chart">
    <div class="container">
        <div class="row text-center">
            <div class="col-md-4">
                <div class="coin">
                    <h3><i class="cc @Model.Coin.Id"></i> @Model.Coin.Name <small>(@Model.Coin.Id)</small></h3>
                    <h4>@Model.PricePerCoinNow <small class="@(double.Parse(Model.PriceChange24Hours) < 0 ? "text-danger" : "text-success")">(@Model.PriceChange24Hours%)</small></h4>
                </div>
            </div>
            <div class="col-md-2">
                <h4 class="mt-2">@Html.DisplayFor(model => model.Hour24High)<br /><small>@Html.DisplayNameFor(model => model.Hour24High)</small></h4>
            </div>
            <div class="col-md-2">
                <h4 class="mt-2">@Html.DisplayFor(model => model.Hour24Low)<br /><small>@Html.DisplayNameFor(model => model.Hour24Low)</small></h4>
            </div>
            <div class="col-md-2">
                <h4 class="mt-2">@Html.DisplayFor(model => model.Volume24)<br /><small>@Html.DisplayNameFor(model => model.Volume24)</small></h4>
            </div>
            <div class="col-md-2">
                <h4 class="mt-2">@Html.DisplayFor(model => model.MarketCap)<br /><small>@Html.DisplayNameFor(model => model.MarketCap)</small></h4>
            </div>
        </div>
        <hr />
    </div>
    <div style="width: 100%">
        <canvas id="chart-area"></canvas>
    </div>
</div>
<div class="content summary">
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <div class="well well-lg">
                    <h4>You bought,</h4>
                    <h3>@Model.Amount @Model.CoinId <small>@Html.DisplayFor(model => model.InvestmentDate)</small></h3>
                    <hr />
                    <h4>You paid,</h4>
                    <h3>£@Model.Cost.ToString("n2") <small>£@Model.PricePerCoin.ToString("n2") per coin</small></h3>
                    <hr />
                    <h4>You have a,</h4>
                    <h3>£@Model.Profit.ToString("n2") <small>@(Model.Profit < 0 ? "loss" : "profit")</small></h3>
                </div>
            </div>
            <div class="col-md-4">
                <div class="well well-lg">
                    <h4>@Model.CoinId @Html.DisplayNameFor(model => model.MarketCap).ToLower(),</h4>
                    <h3>@Html.DisplayFor(model => model.MarketCap)</h3>
                    <hr />
                    <h4>@Model.CoinId @Html.DisplayNameFor(model => model.Supply).ToLower(),</h4>
                    <h3>@Html.DisplayFor(model => model.Supply)</h3>
                </div>
            </div>
            <div class="col-md-4">
                <div style="width: 100%">
                    <canvas id="chart-area2"></canvas>
                </div>
                <div class="mt-5" style="width: 100%">
                    <canvas id="chart-area3"></canvas>
                </div>
            </div>
        </div>
        <div>
            <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
            <a asp-action="Index">Back to List</a>
        </div>
    </div>
</div>

@section Scripts {
<script type="text/javascript">
        window.chartColors = {
            red: 'rgba(255, 99, 132, 0.5)',
            orange: 'rgba(255, 159, 64, 0.5)',
            yellow: 'rgba(255, 205, 86, 0.5)',
            green: 'rgba(24,188,156, 0.5)',
            blue: 'rgba(54, 162, 235, 0.5)',
            purple: 'rgba(153, 102, 255, 0.5)',
            grey: 'rgba(231,233,237, 0.5)'
        };

        var config = {
            type: 'line',
            data: {
                datasets: [{
                    data: [@string.Join(",", Model.ChartDataValue)],
                    backgroundColor: [
                        window.chartColors.green,
                    ],
                }],
                labels: ["@Html.Raw(string.Join("\",\"", Model.ChartDataDate))"]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                legend: {
                    display: false
                },
                tooltips: {
                    enabled: true,
                    callbacks: {
                        label: function (tooltipItem, data) {
                            return "£" + data['datasets'][0]['data'][tooltipItem['index']];
                        }
                    }
                },
                scales: {
                    xAxes: [{
                        display: false
                    }],
                    yAxes: [{
                        display: false
                    }]
                },
            }
        };

        var config2 = {
            type: 'radar',
            data: {
                datasets: [{
                    data: [@Model.Profit, @Model.Profit1High, @Model.Profit1Low, @Model.Profit24Low.Replace(",", ""), @Model.Profit24High.Replace(",", "")],
                    backgroundColor: [
                        window.chartColors.blue,
                        window.chartColors.green,
                        window.chartColors.red,
                    ]
                }],
                labels: ["Current Profit", "Profit 1h High", "Profit 1h Low", "Profit 24h Low", "Profit 24h High"]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                legend: {
                    display: false
                },
                scale: {
                    ticks: {
                        display: false
                    }
                },
                tooltips: {
                    enabled: true,
                    callbacks: {
                        label: function (tooltipItem, data) {
                            return "£" + data['datasets'][0]['data'][tooltipItem['index']];
                        }
                    }
                }
            }
        };

        var config3 = {
            type: 'line',
            data: {
                datasets: [{
                    data: [@string.Join(",", Model.ChartDataValue)],
                    backgroundColor: [
                        window.chartColors.green,
                    ],
                }],
                labels: ["@Html.Raw(string.Join("\",\"", Model.ChartDataDate))"]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                legend: {
                    display: false
                },
                tooltips: {
                    enabled: true,
                    callbacks: {
                        label: function (tooltipItem, data) {
                            return "£" + data['datasets'][0]['data'][tooltipItem['index']];
                        }
                    }
                },
                scales: {
                    xAxes: [{
                        display: true
                    }],
                    yAxes: [{
                        display: true,
                        ticks: {
                            callback: function (value, index, values) {
                                return '£' + value;
                            }
                        }
                    }]
                }
            }
        };

        window.onload = function () {
            var ctx = document.getElementById("chart-area").getContext("2d");
            window.myPie = new Chart(ctx, config);

            var ctx = document.getElementById("chart-area2").getContext("2d");
            window.myPie = new Chart(ctx, config2);

            var ctx = document.getElementById("chart-area3").getContext("2d");
            window.myPie = new Chart(ctx, config3);
        };
</script>
}